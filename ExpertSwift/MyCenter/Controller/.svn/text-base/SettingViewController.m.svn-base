//
//  SettingViewController.m
//  qierkang
//
//  Created by 陈刚 on 17/3/15.
//  Copyright © 2017年 dzjk. All rights reserved.
//

#import "SettingViewController.h"

@interface SettingViewController ()<UITableViewDelegate,UITableViewDataSource>
//tableview
@property (nonatomic,strong)UITableView *Tableview;
//数据
@property (nonatomic,strong)NSArray *cellArr;
@end

@implementation SettingViewController
- (NSArray *)cellArr
{
    if (_cellArr == nil) {
        
        NSDictionary *infoDictionary = [[NSBundle mainBundle] infoDictionary];
        
        // app版本
        NSString *app_Version = [NSString stringWithFormat:@"v%@",[infoDictionary objectForKey:@"CFBundleShortVersionString"]];
        
        _cellArr = @[@[@{@"left":@"帮助",@"right":@""}],
                     @[@{@"left":@"修改密码",@"right":@""},
                       @{@"left":@"清除缓存",@"right":@""}],
                     @[@{@"left":@"版本信息",@"right":app_Version}],
                     @[@{@"left":@"退出登录",@"right":@""}]];
    }
    return _cellArr;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.navigationItem.title = @"设置中心";
    self.view.backgroundColor = kWhiteColor;
    //设置界面
    [self setUI];
    
}

#pragma mark - 界面设置
-(void)setUI
{
    //创建列表
    //添加tabbleview
    self.Tableview = [[UITableView alloc] initWithFrame:CGRectMake(0, 0, JYScreenW, JYScreenH) style:UITableViewStyleGrouped];
    self.Tableview.showsVerticalScrollIndicator = NO;
    self.Tableview.delegate = self;
    self.Tableview.dataSource = self;
    
    self.Tableview.backgroundColor = UIColorFromRGB(0xEBEBEB);
    [self.view addSubview:_Tableview];
    
}
#pragma mark-<UITableViewDataSource>

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return self.cellArr.count;
}
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return  [self.cellArr[section] count];
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"cell"];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleValue1 reuseIdentifier:@"cell"];
    }
    cell.textLabel.textColor = kBlackColor;
    cell.detailTextLabel.textColor = kBlackColor;
    cell.textLabel.text = [self.cellArr[indexPath.section][indexPath.row] objectForKey:@"left"];
    cell.detailTextLabel.text = [self.cellArr[indexPath.section][indexPath.row] objectForKey:@"right"];
    switch (indexPath.section) {
        case 2:
            break;
        case 3:
            break;
        default:
            cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
            break;
    }
    
    return cell;
}

#pragma mark-<UITableViewDelegate>
- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return kHeight(44);
    
}
- (CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section
{
    return 0.01;
}
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    switch (section) {
        case 0:
            return 0.01;
            break;
        default:
            return kHeight(10);
            break;
    }
    
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    switch (indexPath.section) {
        case 0:
            [Mediator pushToControll:@"helpHtmlViewController"];
            break;
        case 1:
            switch (indexPath.row) {
                case 0:
                    [Mediator pushToControll:@"changePaswViewController"];
                    
                    break;
                default:
                    [[commonUnit sharedCommonUtils] showAlertWithTitle:@"清除缓存" message:@"确定要清除缓存吗？" actionTitle:@"确认" cancelTitle:@"取消" withControl:self withActionHandler:^{
                        //清除本地Cache缓存
                        [[chiveDataManager sharedChive] clearFile];
                        //清除sd缓存
                        [[SDWebImageManager sharedManager].imageCache clearMemory];
                        [self performSelectorOnMainThread:@selector(clearCachesSuccess) withObject:nil waitUntilDone:YES];
                        
                    } withCancelHandler:nil];

                    break;
            }
            break;
        case 2:
            break;
        case 3:
            [[commonUnit sharedCommonUtils] showAlertWithTitle:@"退出" message:@"确定要退出当前账号吗？" actionTitle:@"确认" cancelTitle:@"取消" withControl:self withActionHandler:^{
//                退出登录
            [[EMClient sharedClient] logout:YES completion:^(EMError *aError) {
                if (!aError) {
                    [Mediator loginOutWithLoginClass:@"LoginViewController" withNavC:@"JYNavigationContrller"];
                }
            }];
                
            } withCancelHandler:nil];

            break;
        default:
            break;
    }
}
#pragma mark - 清楚缓存成功
- (void)clearCachesSuccess
{
    [[commonUnit sharedCommonUtils] showAlertWithTitle:nil message:@"清除缓存成功！" withDismissTime:1 withControl:self];
    
}
@end
